template <class T>
class ArrayList {
protected:
    T* data;        // dynamic array to store the list's items
    int capacity;   // size of the dynamic array
    int count;      // number of items stored in the array

public:
    ArrayList(){capacity = 5; count = 0; data = new T[5];}
   ~ArrayList(){ delete[] data; }    
    void    add(T e);
    void    add(int index, T e);
    int     size();
    bool    empty();
    void    clear();
    T       get(int index);
    void    set(int index, T e);
    int     indexOf(T item);
    bool    contains(T item);
    T       removeAt(int index);
    bool    removeItem(T item);
    void    ensureCapacity(int index);
};

template<class T>
T ArrayList<T>::removeAt(int index) {
    if (index < 0 || index >= count) {
        throw std::out_of_range("the input index is out of range!");
    }
    T item = data[index];
    for (int i = index; i < count - 1; i++) {
        data[i] = data[i+1];
    }
    count--;
    return item;
}

template<class T>
bool ArrayList<T>::removeItem(T item) {
    int index = indexOf(item);
    if (index == -1) {
        return false;
    }
    removeAt(index);
    return true;
}

template<class T>
void ArrayList<T>::clear() {
    count = 0;
}
