//////////////////////bai1
// Merge two sorted lists
ListNode* mergeLists(ListNode* l1, ListNode* l2) {
    ListNode node(0);
    ListNode* tail = &node;

    while (l1 && l2) {
        if (l1->val < l2->val) {
            tail->next = l1;
            l1 = l1->next;
        } else {
            tail->next = l2;
            l2 = l2->next;
        }
        tail = tail->next;
    }

    tail->next = l1 ? l1 : l2;

    return node.next;
}

// Sort an unsorted list given its head pointer
ListNode* mergeSortList(ListNode* head) {
    if (!head || !head->next) {
        return head;
    }

    ListNode* slow = head;
    ListNode* fast = head->next;

    while (fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
    }

    ListNode* mid = slow->next;
    slow->next = nullptr;

    return mergeLists(mergeSortList(head), mergeSortList(mid));
}

//////////////////////////bai2

template <class T>
static void merge(T* start, T* middle, T* end) {
    // TODO
    T* left = start;
    T* right = end;
    T i, j, k;
    T n1 = middle - left + 1;
    T n2 = right - middle;
    /* Tạo các mảng tạm */
    T *L = new T[n1], *R = new T[n2];
    /* Copy dữ liệu sang các mảng tạm */
    for (i = 0; i < n1; i++)
        L[i] = left[i];
    for (j = 0; j < n2; j++)
        R[j] = middle[1 + j];

    /* Gộp hai mảng tạm vừa rồi vào mảng arr*/
    i = 0; // Khởi tạo chỉ số bắt đầu của mảng con đầu tiên
    j = 0; // Khởi tạo chỉ số bắt đầu của mảng con thứ hai
    k = 0; // IKhởi tạo chỉ số bắt đầu của mảng lưu kết quả
    while (i < n1 && j < n2)
    {
        if (L[i] <= R[j])
        {
            left[k] = L[i];
            i++;
        }
        else
        {
            left[k] = R[j];
            j++;
        }
        k++;
    }

    /* Copy các phần tử còn lại của mảng L vào arr nếu có */
    while (i < n1)
    {
        left[k] = L[i];
        i++;
        k++;
    }

    /* Copy các phần tử còn lại của mảng R vào arr nếu có */
    while (j < n2)
    {
        left[k] = R[j];
        j++;
        k++;
    }
//	delete L, R;
}

template <class T>
static void InsertionSort(T* start, T* end) {
    // TODO
    for (int i = 0; i<end - start; i++) {
        char min = start[i];
        int id = i;
        for (int j = i; j<end - start; j++){
            if (start[j]<min){
                id = j;
                min = start[j];
            }
        }
        int temp = start[i];
        start[i] = start[id];
        start[id] = temp;
    }
}

template <class T>
static void TimSort(T* start, T* end, int min_size) {
    // TODO
    // You must print out the array after using insertion sort and everytime calling method merge.
    cout << "Insertion Sort: ";
    for (int i = 0; i < end - start; i += min_size){
        if (start+i+min_size<end) InsertionSort(start + i, start+i+min_size);
        else InsertionSort(start + i, end);
    }
    printArray(start, end);
    int i = 1;
    for (int size = min_size; size < end - start; size = 2 * size){
        for (int left = 0; left < end - start; left += 2 * size,i++){
            cout << "Merge " << i << ": ";
            int mid = (left + size - 1) < (end - start - 1) ? (left + size - 1) : (end - start - 1); 
            int right = (left + 2 * size - 1) < (end - start - 1) ? (left + 2 * size - 1) : (end - start - 1); 
            merge(&start[left], &start[mid], &start[right]);
            printArray(start, end);
        }
    }
}

//////////////////////////bai3
int maxNumberOfPeople(vector<int>& rooms, vector<int>& people, int k) {
    int n = people.size();
    int m = rooms.size();
    int ans = 0;
    sort(rooms.begin(), rooms.end());
    sort(people.begin(), people.end());
    int i = 0, j = 0;
    while (i < n && j < m) {
        if (abs(rooms[j] - people[i]) <= k) {
            ans++;
            i++;
            j++;
        } else if (rooms[j] < people[i]) {
            j++;
        } else {
            i++;
        }
    }
    return ans;
}

///////////////////////////bai4
string minDiffPairs(int* arr, int n) {
    sort(arr, arr + n);
    int minDiff = arr[1] - arr[0];
    for (int i = 2; i < n; i++) {
        minDiff = min(minDiff, arr[i] - arr[i-1]);
    }
    string pairs;
    bool firstPair = true;
    for (int i = 1; i < n; i++) {
        if (arr[i] - arr[i-1] == minDiff) {
            if (!firstPair) {
                pairs += ", ";
            }
            pairs += "(" + to_string(arr[i-1]) + ", " + to_string(arr[i]) + ")";
            firstPair = false;
        }
    }
    return pairs;
}
////////////////////////bai5
int sumRecur(Node* root){
    if(root == NULL) return 0;
    else if(root->pLeft == NULL && root->pRight == NULL){
        return root->value + sumRecur(root->pLeft) + sumRecur(root->pRight);
    }
    else return sumRecur(root->pLeft) + sumRecur(root->pRight);
}
//Helping Functions
int sumOfLeafs(){
    //TODO
    return sumRecur(this->root);
}